# sentinel-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sentinel-config
  namespace: my-chat-app
data:
  sentinel.conf: |
    port 26379
    dir /data
    sentinel monitor mymaster 10.244.1.3 6379 2
    sentinel down-after-milliseconds mymaster 5000
    sentinel failover-timeout mymaster 10000
    sentinel parallel-syncs mymaster 1

---

# redis-sentinel-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-sentinel
  namespace: my-chat-app
spec:
  serviceName: redis-sentinel-headless
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
    spec:
      initContainers:
      - name: init-config
        image: busybox:1.31.1
        command: ["sh", "-c", "cp /config/sentinel.conf /data/sentinel.conf && chmod 777 /data/sentinel.conf"]
        volumeMounts:
        - name: sentinel-config
          mountPath: /config
        - name: sentinel-data
          mountPath: /data

      containers:
      - name: sentinel
        image: redis:6.2
        command: ["redis-server", "/data/sentinel.conf", "--sentinel"]
        ports:
        - containerPort: 26379
        volumeMounts:
        - name: sentinel-data
          mountPath: /data
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

      volumes:
      - name: sentinel-config
        configMap:
          name: sentinel-config

  volumeClaimTemplates:
  - metadata:
      name: sentinel-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
# redis-sentinel-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel-headless
  namespace: my-chat-app
spec:
  clusterIP: None
  selector:
    app: redis-sentinel
  ports:
    - port: 26379


#
## PersistentVolumeClaim for Redis Data
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: redis-pvc
#  namespace: my-chat-app
#spec:
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: 1Gi
#
#---
#
## ConfigMap for Redis Configuration
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: redis-config
#  namespace: my-chat-app
#data:
#  redis.conf: |
#    bind 0.0.0.0
#    protected-mode no
#    port 6379
#    dir /data
#    dbfilename dump-${HOSTNAME}.rdb
#    appendfilename appendonly-${HOSTNAME}.aof
#    appendonly yes
#    save 900 1
#    save 300 10
#    save 60 10000
#    replica-serve-stale-data yes
#    replica-read-only yes
#
#
#---
## ConfigMap for Redis Sentinel Configuration
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: redis-sentinel-config
#  namespace: my-chat-app
#data:
#  sentinel.conf: |
#    port 26379
#    sentinel monitor mymaster redis-0.redis-headless.my-chat-app.svc.cluster.local 6379 2
#    sentinel down-after-milliseconds mymaster 5000
#    sentinel failover-timeout mymaster 10000
#    sentinel parallel-syncs mymaster 1
#    sentinel resolve-hostnames yes
#    sentinel announce-hostnames yes
#
#
#  init-sentinel.sh: |
#    #!/bin/sh
#    cp /sentinel-config/sentinel.conf /etc/sentinel/sentinel.conf
#    exec redis-server /etc/sentinel/sentinel.conf --sentinel
#
#---
#
## StatefulSet for Redis Instances
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: redis
#  namespace: my-chat-app
#spec:
#  replicas: 3
#  selector:
#    matchLabels:
#      app: redis
#  serviceName: redis-headless
#  template:
#    metadata:
#      labels:
#        app: redis
#    spec:
#      initContainers:
#        - name: config
#          image: redis:6.0  # Matching Redis version with the web app
#          command: [ "sh", "-c" ]
#          args:
#            - |
#              MASTER_FQDN=$(hostname -f | sed 's/redis-[0-9]/redis-0/')
#              if [ "$(redis-cli -h sentinel -p 26379 ping)" != "PONG" ]; then
#                echo "Sentinel not found, defaulting to redis-0 as master"
#                if [ "$(hostname)" != "redis-0" ]; then
#                  echo "Setting replicaof $MASTER_FQDN 6379 in redis.conf"
#                  echo "replicaof $MASTER_FQDN 6379" >> /etc/redis/redis.conf
#                fi
#              fi
#          volumeMounts:
#            - name: redis-config
#              mountPath: /etc/redis/
#            - name: config
#              mountPath: /tmp/redis/
#      containers:
#        - name: redis
#          image: redis:6.0  # Ensure Redis matches your app's dependencies
#          command: ["redis-server", "/etc/redis/redis.conf"]
#          ports:
#            - containerPort: 6379
#              name: redis
#          volumeMounts:
#            - name: redis-config
#              mountPath: /etc/redis/
#            - name: redis-data
#              mountPath: /data
#          readinessProbe:
#            tcpSocket:
#              port: 6379
#            initialDelaySeconds: 5
#            periodSeconds: 10
#          livenessProbe:
#            tcpSocket:
#              port: 6379
#            initialDelaySeconds: 15
#            periodSeconds: 20
#          securityContext:
#            runAsNonRoot: true
#            runAsUser: 1000  # Avoid running as root
#      volumes:
#        - name: redis-config
#          configMap:
#            name: redis-config
#        - name: config
#          emptyDir: {}
#  volumeClaimTemplates:
#  - metadata:
#      name: redis-data
#    spec:
#      accessModes: ["ReadWriteOnce"]
#      resources:
#        requests:
#          storage: 64Mi
#
#---
#
## Deployment for Redis Sentinel
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: redis-sentinel
#  namespace: my-chat-app
#spec:
#  serviceName: redis-sentinel
#  replicas: 3
#  selector:
#    matchLabels:
#      app: redis-sentinel
#  template:
#    metadata:
#      labels:
#        app: redis-sentinel
#    spec:
#      initContainers:
#      - name: config
#        image: redis:6.0
#        command: [ "sh", "-c" ]
#        args:
#          - |
#            REDIS_PASSWORD=a-very-complex-password-here
#            nodes=redis-0.redis-headless.my-chat-app.svc.cluster.local,redis-1.redis-headless.my-chat-app.svc.cluster.local,redis-2.redis-headless.my-chat-app.svc.cluster.local
#            for i in $(echo $nodes | sed -e "s/,/ /g"); do
#              echo "Checking $i for master..."
#              MASTER=$(redis-cli --no-auth-warning --raw -h $i -p 6379 info replication | grep master_host | cut -d: -f2)
#              if [ ! -z "$MASTER" ]; then
#                break
#              fi
#            done
#            echo "sentinel monitor mymaster $MASTER 6379 2" >> /etc/redis/sentinel.conf
#            echo "port 26379" >> /etc/redis/sentinel.conf
#            echo "sentinel auth-pass mymaster $REDIS_PASSWORD" >> /etc/redis/sentinel.conf
#        volumeMounts:
#        - name: sentinel-config
#          mountPath: /etc/redis/
#
#      containers:
#      - name: redis-sentinel
#        image: redis:6.0
#        command: ["redis-sentinel", "/etc/redis/sentinel.conf"]
#        ports:
#        - containerPort: 26379
#          name: sentinel
#        volumeMounts:
#        - name: sentinel-config
#          mountPath: /etc/redis/
#        - name: sentinel-data
#          mountPath: /data
#      volumes:
#      - name: sentinel-config
#        emptyDir: {}
#  volumeClaimTemplates:
#  - metadata:
#      name: sentinel-data
#    spec:
#      accessModes: ["ReadWriteOnce"]
#      resources:
#        requests:
#          storage: 100Mi
#
#---
#
## Headless Service for Redis
#apiVersion: v1
#kind: Service
#metadata:
#  name: redis-headless
#  namespace: my-chat-app
#spec:
#  clusterIP: None
#  selector:
#    app: redis
#  ports:
#    - name: redis
#      port: 6379
#
#---
#
## Service for Redis Sentinel
#apiVersion: v1
#kind: Service
#metadata:
#  name: redis-sentinel
#  namespace: my-chat-app
#spec:
#  clusterIP: None
#  selector:
#    app: redis-sentinel
#  ports:
#    - name: sentinel
#      port: 26379
#      targetPort: 26379
